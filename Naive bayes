from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import confusion_matrix, accuracy_score
import pandas as pd

# Modified dataset with a bit of noise
texts = [
    "Win a million dollars now", "Limited time offer", "Hi, how are you?",
    "Congratulations, you won!", "Are we meeting today?", "Get cheap meds now",
    "You have been selected", "Let's have lunch tomorrow", "Buy one get one free",
    "See you at the conference", "Hey, get rich fast!", "Meeting postponed"
]
labels = [1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1]  # Added two more samples, one misaligned intentionally

# Vectorize the text
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(texts)
y = labels

# Split into train and test sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train Naive Bayes
model = MultinomialNB()
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)
cm = confusion_matrix(y_test, y_pred)
acc = accuracy_score(y_test, y_pred)

print("Confusion Matrix:\n", cm)
print("Accuracy:", acc)
